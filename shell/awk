set -e

将系统变量传递至awk中
awk -v ip=$IP '{host[$1]=$2} END{print host[ip]}' /home/zyc/Desktop/hosts

将awk变量传至系统变量中：
echo "14-Oct-2012" | awk '{filename=$0;"date +%F -d "filename""|getline b;print b}'

egrep "$IP" ~/Desktop/hosts | awk '{print $2}'

awk 'BEGIN{var="'$1'"} {if(var==$1)print $2}' ~/Desktop/hosts

awk '{if($1 ~/'$1'/)print $2}' ~/Desktop/hosts

awk '{str[$1]=str[$1]" "$2} {for(var in str) print var" "str[var]' file
///////////////////典型的月经问题，注意$2不要写在双引号中////////////////
注意:$1,2无需加双引号,否则会没有输出，需注意awk变量和shell变量值之间的传递。

如何在每行开头或结尾添加字符串：
1、开头:sed "s/^/string\n&/g" file
2、结尾:sed "s/$/&\nstring/g" file

如何删除某列不符要求的行：
1、awk ‘$num>date{next}1’ = awk '$num>date{next} 1{print $0}'

如何删除文件中重复的文本:
   awk '!a[$0]++' file(先判断后执行加法)

awk中连续几个括号如何执行:
   awk '/pattern/{A} {B} {C}' file:满足条件pattern则顺序执行A,B,C，不满足条件则顺序执行{B}{C}


awk中的真假：
  1、数字0
  2、空字符串
  3、未定义的值
   例：1、awk 'BEGIN{if(0) print "true";else print "false"}'     false  
       2、awk 'BEGIN{if("0")}print "true";else print "false"}'   true
       3、awk 'BEGIN{if( a=1 )print "true";else print "false"}'  true
       4、awk 'BEGIN{if( a=a )print "true";else print "false"}'  false
      (ps:先计算括号里的值在根据上述原则判断真假)

awk,sed打印指定行:
  1、awk 'NR>=1;NR<=5' file:打印一至五行；
  2、awk '1;NR==10{exit}' file:打印前10行；
  3、awk 'NR==NUM1||NR==NUM2' file:打印NUM1行或者NUM2行
  4：sed -n '1,3p':打印一至三行；
  5、sed -n '1p;3p':打印第一行和第三行


awk选择性打印(grep -A-B实现)：

  1、pattrn匹配时，打印前一行：
      awk '!/pattern/{var=$0}/pattern/{print var}' file
      awk '/pattern/{print $var}{var=$0}' file

  2、pattern匹配时打印前n行：
      awk '{array[NR]=$0}/pattern/{p=NR}END{for(i=p-n;i<p;i++) print array[$i]}' file
      awk '{array[NR]=$0}/pattern/{for(p=NR-n;p<NR;p++) print array[p];exit}
      awk '/pattern/{for(p=NR-n;p<NR;p++) print array[p];exit}{array[NR%N]=$0}' file(精辟)

  3、pattern匹配时打印后n行：
      awk '/pattern/{p=1;x=NR}p&&NR-x>0&&NR-x<=n' file
      awk '/pattern/{p=n;next}--i>0'(精辟)

  4、匹配pattren第二次时打印后N行:
      awk ‘/pattern/{t++;x=NR}t==2&&NR-x>0&&NR-x<=2’ file
      awk '/pattern/{t++;k=n}--k>0&&t==2'

  5、匹配两个pattern模式之间的文本:awk '/pattern1/,/pattern2/' file
  6、匹配两个pattern模式之间的文本(不包括匹配行):awk '/pattern1/{getline}/pattern2/{exit}1'
  7、匹配某范围之间符合正则表达式的数据(不包括匹配行)：awk '/pattern1/{p=1;getline}/pattern1/{p=0}p==1{array[i++]}END{for(var in array){ if(array[var] ~/pattern3/) print array[j]}'  file

awk小技巧:
  1、awk 'i=!i'; awk 'NR%2==1{next}1':打印奇数行；
  2、awk处理多文件：awk 'FNR==1{print};FNR==10{nextfile}' [abc].txt(ps:注意文件的表示)
  3、FILENAM:awk '{print FILENAME,print $0}' [abc].txt:打印文件名
  4、筛选特定格式文件中存在符合正则表达式的数据(精辟):awk 'BEGIN{RS="定界符1"} /PATTERN/{print RS,$0}' file
     file文件格式：start  xxx  xxx end start  xxx   xxx  end
  5、IFS设置:awk -F '[,.:]+' '{}' FILE

sed:
  1、删除文档中的空白行：sed '/^/s*$/d' file; sed '/^$/d file'
  2、删除文档开头的空白：sed 's/^\s\+//' file;sed -r 's/^\s+//' file
  3、为文本添加行号：sed '=' file | sed '{N;s/\n//}'
  4、跳转命令:
     sed '{/pattern/b tag;s///;:tag s///}' file
     echo "1234567" | sed '{
     :start
     s/\(.*[0-9]\)\([0-9]\{3\}\)/\1.\2
     t start
     }'

sed中单双引号的区别:
   EX:sed -i "1i$(basename $file)" $file
   上式中需注意1、i后面不需要\(经测试,\符号有无均可) 2、该式中只能引用双引号而非单引号;
   单引号:shell处理命令时,对其中的内容部做任何处理。
   双引号:shell处理命令时,要对其中的内容进行算术扩展.一般在引入变量时需要用双引号。
	
awk调用system函数:
  awk 'BEGIN{while(system("ls -al")| getline line){print line}}':此处system外没加双引号。

awk中getline的用法:



